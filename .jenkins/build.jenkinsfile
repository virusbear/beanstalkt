pipeline {
    agent any

    options {
        timestamps()
    }

    stages {
        stage("Ensure gradlew executable") {
            steps {
                sh 'chmod +x gradlew'
            }
        }
        stage("Build") {
            steps {
                withGradle {
                    sh './gradlew clean assemble --parallel --no-daemon'
                }
            }
        }
        stage("Checks") {
            parallel {
                stage("Test") {
                    steps {
                        withGradle {
                            sh "./gradlew test --no-daemon"
                        }
                    }

                    post {
                        always {
                            junit '**/build/test-results/**/*.xml'
                            jacoco(
                                execPattern: '**/build/jacoco/*.exec',
                                classPattern: '**/build/classes/*/main',
                                sourcePattern: '**/src/main'
                            )
                        }
                    }
                }
                stage("Detekt") {
                    steps {
                        withGradle {
                            sh "./gradlew detekt --no-daemon"
                        }
                    }

                    post {
                        always {
                            recordIssues enabledForFailure: true, tools: [checkStyle(pattern: '**/build/reports/detekt/detekt.xml')]
                        }
                    }
                }
            }
        }
        stage("Release") {
            when {
                branch 'main'
                not {
                    changelog '.*^\\[ci skip\\] .+$'
                }
            }

            def incrementVersionType = "PATCH"

            stages {
                stage("Determine semantic version type") {
                    steps {
                        script {
                            def commit = sh(returnStdout: true, script = "git log --format=%B -n 1")
                            def type = (commit =~ /^(\w*)(?:\(([\w$.\-*\\/ ]*)\))?!?: (.*)$/)[1]

                            def versionTypes = [
                                "fix": "PATCH",
                                "feat": "MINOR",
                                "docs": "NONE",
                                "chore": "NONE",
                                "refactor": "PATCH",
                                "style": "PATCH",
                                "test": "NONE",
                                "perf": "PATCH",
                                "ci": "NONE",
                                "build": "NONE",
                                "revert": "PATCH",
                            ]
                            incrementVersionType = versionTypes.getOrDefault(type.toString(), "NONE")
                        }
                    }
                }
                stage("Increment version") {
                    when {
                        not {
                            equals expected: "NONE", actual: incrementVersionType
                        }
                    }
                    steps {
                        withGradle {
                            sh "./gradlew incrementVersion --versionIncrementType ${}"
                            script {
                                def version = sh(returnStdout: true, script: "./gradlew printVersion -Psnapshot=false -q")
                                echo "new version: ${version}"
                            }
                        }
                        script {
                            echo "TODO: push to git"
                        }
                    }
                }
                stage("Publish maven artifact") {
                    steps {
                        script {
                            echo "TODO: publish maven"
                        }
                    }
                }
            }
        }
    }
}